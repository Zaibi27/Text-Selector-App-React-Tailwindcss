{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","theButton","dialogBox","uid","selectedText","addedText","useState","theArray","setArray","className","onMouseDown","e","document","querySelector","getComputedStyle","display","target","nodeName","style","getElementById","value","window","getSelection","empty","onMouseUp","querySelectorAll","setTimeout","toString","trim","length","x","clientX","y","clientY","left","top","onClick","text","outline","Date","data","console","log","id","cols","rows","placeholder","obj","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iQA2JeA,MAvJf,WACE,IAAgBC,EAAYC,EAGxBC,EAAMC,EAAeC,EAJZ,EAGiBC,mBAAS,IAH1B,mBAGNC,EAHM,KAGKC,EAHL,KA0Fb,OACE,qBAAKC,UAAU,oCAAoCC,YAvD9B,SAACC,GACxBV,EAAYW,SAASC,cAAc,WACnCX,EAAYU,SAASC,cAAc,eACQ,UAAxCC,iBAAiBb,GAAWc,SAA4C,WAArBJ,EAAEK,OAAOC,UACtC,aAAtBN,EAAEK,OAAOC,WACZhB,EAAUiB,MAAMH,QAAU,OAC1Bb,EAAUgB,MAAMH,QAAU,OAC1BH,SAASO,eAAe,cAAcC,MAAQ,GAC9CC,OAAOC,eAAeC,UA+CpB,SAEA,sBAAKd,UAAU,gCAAf,UACE,oBAAIA,UAAU,+DAAd,8DAGA,mBAAGA,UAAU,6EAA6Ee,UArFzE,SAACb,GACRC,SAASa,iBAAiB,mBACxCxB,EAAYW,SAASC,cAAc,WACpCa,YAAW,WAKN,GAHWL,OAAOC,eAAeK,WAAWC,OAGpCC,OAAS,EAAE,CACjB5B,EAAUiB,MAAMH,QAAU,QAE5B,IAAMe,EAAInB,EAAEoB,QACNC,EAAIrB,EAAEsB,QAGVhC,EAAUiB,MAAMgB,KAAhB,UAA0BJ,EAA1B,MACA7B,EAAUiB,MAAMiB,IAAhB,UAAyBH,EAAE,GAA3B,SAKJ,IAgEE,+uCAeG,wBACAvB,UAAU,+TAKT2B,QAtEY,SAACzB,GACnB,IAAM0B,EAAOhB,OAAOC,eAAeK,WAAWC,QAC9C1B,EAAYU,SAASC,cAAc,gBACzBK,MAAMH,QAAU,OAC1Bd,EAAUiB,MAAMoB,QAAU,OAC1B,IAAMR,EAAInB,EAAEoB,QACNC,EAAIrB,EAAEsB,QACZ/B,EAAUgB,MAAMgB,KAAhB,UAA0BJ,EAAE,GAA5B,MACA5B,EAAUgB,MAAMiB,IAAhB,UAAyBH,EAAE,GAA3B,MAEA7B,EAAM,IAAIoC,KACVnC,EAAeiC,GAqDV,eAQD,qBAAK5B,UAAU,uBAAf,SACA,cAAC,UAAD,CAAS+B,KAAMjC,EAAU6B,QAAS,WAAOK,QAAQC,IAAInC,IACrDE,UAAU,0FADV,4CAOF,sBAAKA,UAAU,uKAGGkC,GAAG,aAHrB,UAIA,0BAAUlC,UAAU,0JAGlBkC,GAAG,aAAaC,KAAK,KAAKC,KAAK,IAAIC,YAAY,uBACjD,wBACArC,UAAU,0RAKN2B,QA/EmB,WACzB/B,EAAYO,SAASO,eAAe,cAAcC,MAElD,IAAI2B,EAAM,CACR5C,IAAKA,EACLC,aAAcA,EACdC,UAAWA,GAGP2C,EAAQ,sBAAOzC,GAAP,CAAkBwC,IAChCvC,EAASwC,GAET/C,EAAUiB,MAAMH,QAAU,OAC1Bb,EAAUgB,MAAMH,QAAU,OAC1BH,SAASO,eAAe,cAAcC,MAAQ,GAC9CC,OAAOC,eAAeC,QAEtBkB,QAAQC,IAAIM,IAwDV,+BChISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhD,SAASO,eAAe,SAM1B8B,M","file":"static/js/main.827f9ab1.chunk.js","sourcesContent":["import {useState , useEffect} from \"react\" ;\nimport './App.css';\nimport {CSVLink} from \"react-csv\" ;\n// import \"./styles/styling.css\" ;\nfunction App() {\n  let selectArea, theButton , dialogBox , textArea  ;\n \n  const [theArray , setArray] = useState([]) ;\n  let uid , selectedText , addedText ; \n\n  const data = [\n    { details: { firstName: 'Ahmed', lastName: 'Tomi' }, job: 'manager'},\n    { details: { firstName: 'John', lastName: 'Jones' }, job: 'developer'},\n  ];\n    // const [array , setArray] = useState(null) ;\n\nconst loggerFunction = (e) => {\n  selectArea =  document.querySelectorAll(\".select-content\");\n  theButton = document.querySelector(\".button\");  \n setTimeout(() => {  //settimeout set to zero so the selected text is deselected if the user again clicks on it\n\n    const text = window.getSelection().toString().trim(); //get the selected text using the getSelection method\n  // console.log(text) ;\n    \n      if(text.length > 0){\n        theButton.style.display = \"block\" ;\n      \n      const x = e.clientX ; //x coordinates of the pointer where the mouseup event was triggered\n      const y = e.clientY ; // y coordinates of the pointer where the mouseup event was triggered\n        \n  \n        theButton.style.left = `${x}px` ;\n        theButton.style.top = `${y-30}px` ;\n        \n       \n  \n    }\n  },0)\n}\n\nconst deselectFunction = (e) =>{\n  theButton = document.querySelector(\".button\");\n  dialogBox = document.querySelector(\".dialog-box\") ;\n  if(getComputedStyle(theButton).display === \"block\" && e.target.nodeName !==\"BUTTON\" \n  && e.target.nodeName !== \"TEXTAREA\"){\n  theButton.style.display = \"none\" ;\n  dialogBox.style.display = \"none\" ;\n  document.getElementById('myTextArea').value = \"\"\n  window.getSelection().empty() ;\n}\n}\n\n  const handleClick = (e) => {\n    const text = window.getSelection().toString().trim();\n    dialogBox = document.querySelector(\".dialog-box\") ;\n    dialogBox.style.display = \"flex\" ;\n    theButton.style.outline = \"none\"\n    const x = e.clientX ;\n    const y = e.clientY ;\n    dialogBox.style.left = `${x+18}px` ;\n    dialogBox.style.top = `${y+30}px` ;\n\n    uid = new Date() ;\n    selectedText = text\n\n  }\n\n const handleTextAreaClick = () => {\n    addedText = document.getElementById('myTextArea').value\n\n    let obj = {\n      uid: uid ,\n      selectedText: selectedText ,\n      addedText: addedText\n    }\n   \n    const newState = [...theArray , obj] ;\n    setArray(newState) ;\n    \n    theButton.style.display = \"none\" ;\n    dialogBox.style.display = \"none\" ;\n    document.getElementById('myTextArea').value = \"\" ;\n    window.getSelection().empty() ;\n    \n    console.log(newState) ;\n    \n   \n  \n    \n\n   \n  }\n\n\n  return (\n    <div className=\"flex justify-center w-auto bg-img\" onMouseDown={deselectFunction} >\n\n    <div className=\"App container w-screen mt-20 \" >\n      <h1 className=\"text-6xl text-center text-gray-200 font-semibold select-none\">\n        Select the text below to check the functionality\n      </h1>\n      <p className=\"select-content text-gray-100 text-justify text-2xl mt-20 mx-32 font-medium\" onMouseUp={loggerFunction}> \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n           dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n           nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n            voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia \n            deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n            dolore.Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia \n            deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n            dolore.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n            dolore magna aliqua. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia \n            deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n            dolore.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n            dolore magna aliqua.\n         </p>\n         <button \n         className=\"button text-5xl absolute hidden top-0 left-0 rounded-full w-14 pb-2  text-white border-none  hover:outline-none\n         bg-gradient-to-r from-[#f56565] via-[#e55278] to-[#d53f8c]\n         hover:bg-gradient-to-b hover:from-[#f56565] hover:via-[#e55278] hover:to-[#d53f8c]\n         xl:transition xl:duration-150 xl:transform xl:hover:scale-110\n         \"\n          onClick={handleClick} >+</button>\n\n        <div className=\"mt-[30px] ml-[130px]\" >  \n        <CSVLink data={theArray} onClick={() => {console.log(theArray)}} \n        className=\"text-2xl text-gray-100 font-bold \n        mt-[50px] bg-[#62D28F] py-[5px] px-[10px] rounded-lg \"\n        >Click here to download array</CSVLink>\n        </div>\n        \n\n      <div className=\"dialog-box flex flex-col   p-4 rounded-md \n      bg-gradient-to-r from-[#256561] via-[#168c76] to-[#3eb489]\n      absolute left-0 top-0 items-center shadow-2xl\n      hidden space-y-7\" id=\"dialog-box\">\n      <textarea className=\"rounded-md p-2 bg-gray-100 text-[#256561] font-semibold text-xl\n       xl:transition xl:duration-150 xl:transform xl:hover:scale-105\n       border-none outline-none\n      \" id=\"myTextArea\" cols=\"34\" rows=\"5\" placeholder=\"Enter text here...\"></textarea> \n      <button \n      className=\"rounded-xl \n      bg-gradient-to-r from-[#ff5e00] to-[#ffa200] shadow-2xl shadow-inner\n       text-gray-100 font-bold w-[50%] py-3 px-4 hover:bg-gradient-to-r hover:from-[#62D28F] hover:to-[#62D28F]\n       xl:transition xl:duration-150 xl:transform xl:hover:scale-110\n       border-none hover:outline-none\n       \"  onClick={handleTextAreaClick}>Add Text</button>\n     \n    </div>\n\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}